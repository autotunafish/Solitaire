////////Solitaire
///////by John Bruhling

use std::time::{SystemTime};
use std::io::{self, Write, stdout};
fn main() {
    game();
}

fn game() {
    println!("Solitaire");
    println!("");
    
//Create a cut deck
    let black = "\x1b[48;5;52m\x1b[38;5;226m";
    let reed = "\x1b[48;5;52m\x1b[38;5;14m";
    let another = "\x1b[0m";
    let mut deck1 = vec!();
    let mut deck2 = vec!();
    let mut maindeck = vec!();
    let spc = '\u{00A0}';
    let joker = '\u{1F0CF}';
    let facedwn = '\u{1F0A0}';
    let blnkace = '\u{1F0DF}';
    
    let zpade = '\u{2664}';
    let diemund = '\u{2662}';
    let klub = '\u{2667}';
    let haart = '\u{2661}';
    
    let crab = '\u{1F980}';
    let pointer = '\u{261E}';
    
    let acespd = '\u{1F0A1}';
    let twospd = '\u{1F0A2}';
    let thrspd = '\u{1F0A3}';
    let forspd = '\u{1F0A4}';
    let fvespd = '\u{1F0A5}';
    let sixspd = '\u{1F0A6}';
    let svnspd = '\u{1F0A7}';
    let atespd = '\u{1F0A8}';
    let ninspd = '\u{1F0A9}';
    let tenspd = '\u{1F0AA}';
    let jakspd = '\u{1F0AB}';
    let qwnspd = '\u{1F0AD}';
    let kngspd = '\u{1F0AE}';
    
    let acedmd = '\u{1F0C1}';
    let twodmd = '\u{1F0C2}';
    let thrdmd = '\u{1F0C3}';
    let fordmd = '\u{1F0C4}';
    let fvedmd = '\u{1F0C5}';
    let sixdmd = '\u{1F0C6}';
    let svndmd = '\u{1F0C7}';
    let atedmd = '\u{1F0C8}';
    let nindmd = '\u{1F0C9}';
    let tendmd = '\u{1F0CA}';
    let jakdmd = '\u{1F0CB}';
    let qwndmd = '\u{1F0CD}';
    let kngdmd = '\u{1F0CE}';
    
    deck1.push(acespd);
    deck1.push(twospd);
    deck1.push(thrspd);
    deck1.push(forspd);
    deck1.push(fvespd);
    deck1.push(sixspd);
    deck1.push(svnspd);
    deck1.push(atespd);
    deck1.push(ninspd);
    deck1.push(tenspd);
    deck1.push(jakspd);
    deck1.push(qwnspd);
    deck1.push(kngspd);
    deck1.push(acedmd);
    deck1.push(twodmd);
    deck1.push(thrdmd);
    deck1.push(fordmd);
    deck1.push(fvedmd);
    deck1.push(sixdmd);
    deck1.push(svndmd);
    deck1.push(atedmd);
    deck1.push(nindmd);
    deck1.push(tendmd);
    deck1.push(jakdmd);
    deck1.push(qwndmd);
    deck1.push(kngdmd);

    let aceclb = '\u{1F0D1}';
    let twoclb = '\u{1F0D2}';
    let thrclb = '\u{1F0D3}';
    let forclb = '\u{1F0D4}';
    let fveclb = '\u{1F0D5}';
    let sixclb = '\u{1F0D6}';
    let svnclb = '\u{1F0D7}';
    let ateclb = '\u{1F0D8}';
    let ninclb = '\u{1F0D9}';
    let tenclb = '\u{1F0DA}';
    let jakclb = '\u{1F0DB}';
    let qwnclb = '\u{1F0DD}';
    let kngclb = '\u{1F0DE}';
    
    let acehrt = '\u{1F0B1}';
    let twohrt = '\u{1F0B2}';
    let thrhrt = '\u{1F0B3}';
    let forhrt = '\u{1F0B4}';
    let fvehrt = '\u{1F0B5}';
    let sixhrt = '\u{1F0B6}';
    let svnhrt = '\u{1F0B7}';
    let atehrt = '\u{1F0B8}';
    let ninhrt = '\u{1F0B9}';
    let tenhrt = '\u{1F0BA}';
    let jakhrt = '\u{1F0BB}';
    let qwnhrt = '\u{1F0BD}';
    let knghrt = '\u{1F0BE}';
    
    deck2.push(aceclb);
    deck2.push(twoclb);
    deck2.push(thrclb);
    deck2.push(forclb);
    deck2.push(fveclb);
    deck2.push(sixclb);
    deck2.push(svnclb);
    deck2.push(ateclb);
    deck2.push(ninclb);
    deck2.push(tenclb);
    deck2.push(jakclb);
    deck2.push(qwnclb);
    deck2.push(kngclb);
    deck2.push(acehrt);
    deck2.push(twohrt);
    deck2.push(thrhrt);
    deck2.push(forhrt);
    deck2.push(fvehrt);
    deck2.push(sixhrt);
    deck2.push(svnhrt);
    deck2.push(atehrt);
    deck2.push(ninhrt);
    deck2.push(tenhrt);
    deck2.push(jakhrt);
    deck2.push(qwnhrt);
    deck2.push(knghrt);

    //println!("{:?}, {:?}", deck1, deck2);
    
    //begin 52 shuffles
    
    //SHUFFLE1
     
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE2
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE3
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE4
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE5
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE6
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE7
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE8
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE9
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE10
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);

    //SHUFFLE1
     
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE2
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE3
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE4
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE5
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE6
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE7
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE8
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE9
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE10
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
   //SHUFFLE1
     
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE2
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE3
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE4
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE5
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE6
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE7
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE8
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE9
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE10
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);

    //SHUFFLE1
     
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE2
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE3
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE4
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE5
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE6
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    //println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    //println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE7
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    //println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    //println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE8
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    //println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    //println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE9
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    //println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    //println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE10
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    //println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    //println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);

    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
       
    //SHUFFLE1
     
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE2
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE3
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE4
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE5
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE6
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE7
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE8
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE9
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE10
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);

    //SHUFFLE1
     
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    let mut deck1 = maindeck.split_off(26);
    let mut deck2 = maindeck.split_off(0);
    
    //SHUFFLE2
    let mut interleave = 0;
    loop {
    let now1 = SystemTime::now();
        let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then = now1.elapsed().unwrap();
    ////println!("{:?}", then); 
    let now2 = SystemTime::now();
    let mut counter = 1;

    loop {
    counter += 1; 
    if counter > 10 {
        break;
        }
    }
    let then2 = now2.elapsed().unwrap();
    ////println!("{:?}", then2);

    if then >= then2 {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card1);
    maindeck.push(card2);
    }
    else {
    let card1 = deck1.remove(0);
    let card2 = deck2.remove(0);
    maindeck.push(card2);
    maindeck.push(card1);
    }
    interleave += 1;
    if interleave >= 26 {
    break;
    }
    continue;
    }//loop

    let mut cut1 = maindeck.split_off(17);
    let mut cut2 = maindeck.split_off(17);
    let mut cut3 = maindeck.split_off(0);
    maindeck.append(&mut cut1);
    maindeck.append(&mut cut3);
    maindeck.append(&mut cut2);
    
    
//DEAL maindeck into vectors
//enter game loop
    
    let mut discard = vec!();
    let mut homespd = vec!();
    let mut homedmd = vec!();
    let mut homeclb = vec!();
    let mut homehrt = vec!();
    let mut one_up = vec!();
    let mut two_dwn = vec!();
    let mut two_up = vec!();
    let mut thr_dwn = vec!();
    let mut thr_up = vec!();
    let mut for_up = vec!();
    let mut for_dwn = vec!();
    let mut fve_dwn = vec!();
    let mut fve_up = vec!();
    let mut six_dwn = vec!();
    let mut six_up = vec!();
    let mut svn_dwn = vec!();
    let mut svn_up = vec!();
    
    
    let cardinhand = maindeck.pop().unwrap();
    one_up.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    two_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    thr_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    for_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    fve_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    six_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    svn_dwn.push(cardinhand);
    
    let cardinhand = maindeck.pop().unwrap();
    two_up.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    thr_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    for_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    fve_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    six_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    svn_dwn.push(cardinhand);
    
    let cardinhand = maindeck.pop().unwrap();
    thr_up.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    for_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    fve_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    six_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    svn_dwn.push(cardinhand);

    let cardinhand = maindeck.pop().unwrap();
    for_up.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    fve_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    six_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    svn_dwn.push(cardinhand);
    
    let cardinhand = maindeck.pop().unwrap();
    fve_up.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    six_dwn.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    svn_dwn.push(cardinhand);
    
    let cardinhand = maindeck.pop().unwrap();
    six_up.push(cardinhand);
    let cardinhand = maindeck.pop().unwrap();
    svn_dwn.push(cardinhand);
    
    let cardinhand = maindeck.pop().unwrap();
    svn_up.push(cardinhand);
    
    let cardinhand = maindeck.pop().unwrap();
    discard.push(cardinhand);
    
    homeclb.push(blnkace);
    homedmd.push(blnkace);
    homehrt.push(blnkace);
    homespd.push(blnkace);
    
    let mut message = String::new();
    let mut mov = String::new();
    let mut mov2 = String::new();
    let mut clmn_ref = String::new();
    let mut holding = vec!();
    holding.push(blnkace);
    
    
    loop { 
//game

    if homespd.len() + homedmd.len() + homeclb.len() + homehrt.len() >= 56 { 
        holding.clear();
        holding.push(pointer);
    };
    
    let mut _one_upref = one_up.len().clone();
    let mut _two_dwnref = two_dwn.len().clone();
    let mut _two_upnref = two_up.len().clone();
    let mut _thr_dwnref = thr_dwn.len().clone();
    let mut _thr_upref = thr_up.len().clone();
    let mut _for_dwnref = for_dwn.len().clone();
    let mut _for_upref = for_up.len().clone();
    let mut _fve_dwnref = fve_dwn.len().clone();
    let mut _fve_upref = fve_up.len().clone();
    let mut _six_dwnref = six_dwn.len().clone();
    let mut _six_upref = six_up.len().clone();
    let mut _svn_dwnref = svn_dwn.len().clone();
    let mut _svn_upref = svn_up.len().clone();
    
    //border
    println!("\x1b[48;5;130m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;112m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;112m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;112m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;130m \x1b[0m");
    
    //Maindeck, Discard and Home pile number buffer
    println!("\x1b[48;5;124m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m Z  Y         U   V   W   X  \x1b[0m\x1b[48;5;124m \x1b[0m");
    //println!("\x1b[48;5;124m \x1b[0m\x1b[48;5;52m\x1b[38;5;197m                             \x1b[0m\x1b[48;5;124m \x1b[0m");

    //Maindeck, Discard and home piles
    print!("\x1b[48;5;88m \x1b[0m\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
    
    //maindeck
   // let main_dk_chk = maindeck.len();
    if maindeck.len() == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            } else {
        print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
        };
        
        
     print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
   
     
     if discard.len() == 0 {
            if maindeck.len() == 0 {
            print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            }
        };
     
     if discard.len() != 0 {
     let popdisc = discard.pop().unwrap();
    //match to color
     match popdisc {
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdisc),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", popdisc),
        };
          discard.push(popdisc);
    };

     
     if discard.len() == 0 {
            if maindeck.len() != 0 {
        let popmain = maindeck.pop().unwrap();
        match popmain {
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popmain),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", popmain),
        };
        discard.push(popmain);
        };
    };
        
        
        print!("\x1b[48;5;52m\x1b[38;5;197m       \x1b[0m");
        print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", zpade); 
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");

          if homespd.len() != 0 {
    let popspd = homespd.pop().unwrap();
    match popspd {
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", popspd),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popspd),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", popspd),
        };
    homespd.push(popspd);
        };

    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
    print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", diemund); 
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");

        if homedmd.len() != 0 {
    let popdmd = homedmd.pop().unwrap();
    match popdmd {
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", popdmd),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popdmd),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", popdmd),
        };
    homedmd.push(popdmd);
        };

    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
    print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", klub); 
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
    
        if homeclb.len() != 0 {
    let popclb = homeclb.pop().unwrap();
    match popclb {
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", popclb),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", popclb),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", popclb),
        };
    homeclb.push(popclb);
        };

    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
    print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", haart); 
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");

            if homehrt.len() != 0 {
    let pophrt = homehrt.pop().unwrap();
    match pophrt {
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", pophrt),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", pophrt),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", pophrt),
        };
    homehrt.push(pophrt);
        };

    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    //Linebreaker 
    println!("\x1b[48;5;88m \x1b[0m");
    
    //column number buffer
    println!("\x1b[48;5;52m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m      1  2  3  4  5  6  7    \x1b[0m\x1b[48;5;52m \x1b[0m");
    
    
    
    
    

    //ROW A
    print!("\x1b[48;5;88m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    A \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
        if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
        
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_upnref == 0 {
        if _two_dwnref == 1 {
            let popdwn = two_dwn.pop().unwrap();
            two_up.push(popdwn);
            _two_dwnref -= 1;
            _two_upnref += 1;
            };
        };
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_upref == 0 {
        if _thr_dwnref == 1 {
            let popdwn = thr_dwn.pop().unwrap();
            thr_up.push(popdwn);
            _thr_dwnref -= 1;
            _thr_upref += 1;
            };
        };
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
     if _for_upref == 0 {
        if _for_dwnref == 1 {
            let popdwn = for_dwn.pop().unwrap();
            for_up.push(popdwn);
            _for_dwnref -= 1;
            _for_upref += 1;
            };
        };
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
     if _fve_upref == 0 {
        if _fve_dwnref == 1 {
            let popdwn = fve_dwn.pop().unwrap();
            fve_up.push(popdwn);
            _fve_dwnref -= 1;
            _fve_upref += 1;
            };
        };
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_upref == 0 {
        if _six_dwnref == 1 {
            let popdwn = six_dwn.pop().unwrap();
            six_up.push(popdwn);
            _six_dwnref -= 1;
            _six_upref += 1;
            };
        };
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_upref == 0 {
        if _svn_dwnref == 1 {
            let popdwn = svn_dwn.pop().unwrap();
            svn_up.push(popdwn);
            _svn_dwnref -= 1;
            _svn_upref += 1;
            };
        };
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
   if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;88m \x1b[0m");
    
    
    
//ROW B
    print!("\x1b[48;5;124m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    B \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_upnref == 0 {
        if _two_dwnref == 1 {
            let popdwn = two_dwn.pop().unwrap();
            two_up.push(popdwn);
            _two_dwnref -= 1;
            _two_upnref += 1;
            };
        };
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_upref == 0 {
        if _thr_dwnref == 1 {
            let popdwn = thr_dwn.pop().unwrap();
            thr_up.push(popdwn);
            _thr_dwnref -= 1;
            _thr_upref += 1;
            };
        };
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
     if _for_upref == 0 {
        if _for_dwnref == 1 {
            let popdwn = for_dwn.pop().unwrap();
            for_up.push(popdwn);
            _for_dwnref -= 1;
            _for_upref += 1;
            };
        };
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
     if _fve_upref == 0 {
        if _fve_dwnref == 1 {
            let popdwn = fve_dwn.pop().unwrap();
            fve_up.push(popdwn);
            _fve_dwnref -= 1;
            _fve_upref += 1;
            };
        };
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
     if _six_upref == 0 {
        if _six_dwnref == 1 {
            let popdwn = six_dwn.pop().unwrap();
            six_up.push(popdwn);
            _six_dwnref -= 1;
            _six_upref += 1;
            };
        };
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
     if _svn_upref == 0 {
        if _svn_dwnref == 1 {
            let popdwn = svn_dwn.pop().unwrap();
            svn_up.push(popdwn);
            _svn_dwnref -= 1;
            _svn_upref += 1;
            };
        };
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;124m \x1b[0m");
     
    
    
//ROW C
    print!("\x1b[48;5;130m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    C \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_upref == 0 {
        if _thr_dwnref == 1 {
            let popdwn = thr_dwn.pop().unwrap();
            thr_up.push(popdwn);
            _thr_dwnref -= 1;
            _thr_upref += 1;
            };
        };
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
     if _for_upref == 0 {
        if _for_dwnref == 1 {
            let popdwn = for_dwn.pop().unwrap();
            for_up.push(popdwn);
            _for_dwnref -= 1;
            _for_upref += 1;
            };
        };
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
     if _fve_upref == 0 {
        if _fve_dwnref == 1 {
            let popdwn = fve_dwn.pop().unwrap();
            fve_up.push(popdwn);
            _fve_dwnref -= 1;
            _fve_upref += 1;
            };
        };
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
     if _six_upref == 0 {
        if _six_dwnref == 1 {
            let popdwn = six_dwn.pop().unwrap();
            six_up.push(popdwn);
            _six_dwnref -= 1;
            _six_upref += 1;
            };
        };
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
     if _svn_upref == 0 {
        if _svn_dwnref == 1 {
            let popdwn = svn_dwn.pop().unwrap();
            svn_up.push(popdwn);
            _svn_dwnref -= 1;
            _svn_upref += 1;
            };
        };
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;130m \x1b[0m");
     
    
    
//ROW D
    print!("\x1b[48;5;100m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    D \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
     if _for_upref == 0 {
        if _for_dwnref == 1 {
            let popdwn = for_dwn.pop().unwrap();
            for_up.push(popdwn);
            _for_dwnref -= 1;
            _for_upref += 1;
            };
        };
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
     if _fve_upref == 0 {
        if _fve_dwnref == 1 {
            let popdwn = fve_dwn.pop().unwrap();
            fve_up.push(popdwn);
            _fve_dwnref -= 1;
            _fve_upref += 1;
            };
        };
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
     if _six_upref == 0 {
        if _six_dwnref == 1 {
            let popdwn = six_dwn.pop().unwrap();
            six_up.push(popdwn);
            _six_dwnref -= 1;
            _six_upref += 1;
            };
        };
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
     if _svn_upref == 0 {
        if _svn_dwnref == 1 {
            let popdwn = svn_dwn.pop().unwrap();
            svn_up.push(popdwn);
            _svn_dwnref -= 1;
            _svn_upref += 1;
            };
        };
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;100m \x1b[0m");
     
   
   
    //ROW E
    print!("\x1b[48;5;106m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    E \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
     if _fve_upref == 0 {
        if _fve_dwnref == 1 {
            let popdwn = fve_dwn.pop().unwrap();
            fve_up.push(popdwn);
            _fve_dwnref -= 1;
            _fve_upref += 1;
            };
        };
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
     if _six_upref == 0 {
        if _six_dwnref == 1 {
            let popdwn = six_dwn.pop().unwrap();
            six_up.push(popdwn);
            _six_dwnref -= 1;
            _six_upref += 1;
            };
        };
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
     if _svn_upref == 0 {
        if _svn_dwnref == 1 {
            let popdwn = svn_dwn.pop().unwrap();
            svn_up.push(popdwn);
            _svn_dwnref -= 1;
            _svn_upref += 1;
            };
        };
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;106m \x1b[0m");
 
    
    
//ROW F
    print!("\x1b[48;5;112m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    F \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
     if _six_upref == 0 {
        if _six_dwnref == 1 {
            let popdwn = six_dwn.pop().unwrap();
            six_up.push(popdwn);
            _six_dwnref -= 1;
            _six_upref += 1;
            };
        };
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
     if _svn_upref == 0 {
        if _svn_dwnref == 1 {
            let popdwn = svn_dwn.pop().unwrap();
            svn_up.push(popdwn);
            _svn_dwnref -= 1;
            _svn_upref += 1;
            };
        };
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;112m \x1b[0m");
     
    
    
//ROW G
    print!("\x1b[48;5;106m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    G \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
     if _svn_upref == 0 {
        if _svn_dwnref == 1 {
            let popdwn = svn_dwn.pop().unwrap();
            svn_up.push(popdwn);
            _svn_dwnref -= 1;
            _svn_upref += 1;
            };
        };
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;106m \x1b[0m");
     
    
    
//ROW H
    print!("\x1b[48;5;100m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    H \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;100m \x1b[0m");
     
    
//ROW I
    print!("\x1b[48;5;130m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    I \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;130m \x1b[0m");
     
    
    
//ROW J
    print!("\x1b[48;5;124m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    J \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;124m \x1b[0m");
     
    
//ROW K
    print!("\x1b[48;5;88m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    K \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;88m \x1b[0m");
     
    
    
//ROW L
    print!("\x1b[48;5;52m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    L \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;52m \x1b[0m");
     
    
    
//ROW M
    print!("\x1b[48;5;88m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    M \x1b[0m");
    
    //Column 1
    if _one_upref == 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
        };
    if _one_upref != 0 {
    let remove_a1 = one_up.remove(0);
    match remove_a1 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a1),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a1),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a1),
        };
    if remove_a1 == joker {    
        ()
        } else {
        one_up.push(remove_a1);
        };
    _one_upref -= 1;
    };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;88m \x1b[0m");
     
    
    
//ROW N
    print!("\x1b[48;5;124m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    N \x1b[0m");
    
    //Column 1
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    
    //Column 2
    if _two_dwnref + _two_upnref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _two_dwnref == 0 {
        if _two_upnref != 0 {
        let remove_a2 = two_up.remove(0);
        match remove_a2 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a2),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a2),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a2),
        };
    if remove_a2 == joker {    
        ()
        } else {
        two_up.push(remove_a2);
        };
    _two_upnref -= 1;
        };
    };
    if _two_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _two_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");

    
    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;124m \x1b[0m");
     
    
    
//ROW O
    print!("\x1b[48;5;130m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    O \x1b[0m");
    
    //Column 1
  
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 2
   
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 3
    if _thr_dwnref + _thr_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _thr_dwnref == 0 {
        if _thr_upref != 0 {
        let remove_a3 = thr_up.remove(0);
        match remove_a3 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a3),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a3),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a3),
        };
    if remove_a3 == joker {    
        ()
        } else {
        thr_up.push(remove_a3);
        };
    _thr_upref -= 1;
        };
    };
    if _thr_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _thr_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;130m \x1b[0m");
     
    
    
//ROW P
    print!("\x1b[48;5;100m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    P \x1b[0m");
    
    //Column 1
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 2
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 3
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");
    
    
     //Column 4
    if _for_dwnref + _for_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _for_dwnref == 0 {
        if _for_upref != 0 {
        let remove_a4 = for_up.remove(0);
        match remove_a4 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a4),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a4),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a4),
        };
    if remove_a4 == joker {    
        ()
        } else {
        for_up.push(remove_a4);
        };
    _for_upref -= 1;
        };
    };
    if _for_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _for_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;100m \x1b[0m");
     
    
    
//ROW Q
    print!("\x1b[48;5;106m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    Q \x1b[0m");
    
    //Column 1
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 2
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 3
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");
    
    
     //Column 4
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");   
    
    
     //Column 5
    if _fve_dwnref + _fve_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _fve_dwnref == 0 {
        if _fve_upref != 0 {
        let remove_a5 = fve_up.remove(0);
        match remove_a5 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a5),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a5),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a5),
        };
    if remove_a5 == joker {    
        ()
        } else {
        fve_up.push(remove_a5);
        };
    _fve_upref -= 1;
        };
    };
    if _fve_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _fve_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");   
    
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;106m \x1b[0m");
     
    
    
//ROW R
    print!("\x1b[48;5;112m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    R \x1b[0m");
    
    //Column 1
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 2
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 3
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");
    
    
     //Column 4
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");   
    
    
     //Column 5
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");   
    
    
     //Column 6
    if _six_dwnref + _six_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _six_dwnref == 0 {
        if _six_upref != 0 {
        let remove_a6 = six_up.remove(0);
        match remove_a6 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a6),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a6),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a6),
        };
    if remove_a6 == joker {    
        ()
        } else {
        six_up.push(remove_a6);
        };
    _six_upref -= 1;
        };
    };
    if _six_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _six_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m  \x1b[0m");
    
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;112m \x1b[0m");
     
    
    
//ROW S
    print!("\x1b[48;5;106m \x1b[0m\x1b[48;5;52m\x1b[38;5;219m    S \x1b[0m");
    
    //Column 1
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 2
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");

    
    //Column 3
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");
    
    
     //Column 4
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");   
    
    
     //Column 5
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");   
    
    
     //Column 6
    
    print!("\x1b[48;5;52m\x1b[38;5;197m   \x1b[0m");
    
    
     //Column 7
    if _svn_dwnref + _svn_upref == 0 {
        print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m");
            };
    if _svn_dwnref == 0 {
        if _svn_upref != 0 {
        let remove_a7 = svn_up.remove(0);
        match remove_a7 {
        '\u{1F0CF}' => print!("\x1b[48;5;52m\x1b[38;5;197m \x1b[0m"),
        '\u{1F0DF}' => print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", remove_a7),
        '\u{1F0A1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0A9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0AE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D1}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D2}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D3}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D4}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D5}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D6}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D7}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D8}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0D9}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DA}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DB}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DC}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DD}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7), 
        '\u{1F0DE}' => print!("\x1b[48;5;52m\x1b[38;5;226m{}\x1b[0m", remove_a7),      
        _ => print!("\x1b[48;5;52m\x1b[38;5;14m{}\x1b[0m", remove_a7),
        };
    if remove_a7 == joker {    
        ()
        } else {
        svn_up.push(remove_a7);
        };
    _svn_upref -= 1;
        };
    };
    if _svn_dwnref != 0 {
    print!("\x1b[48;5;52m\x1b[38;5;197m{}\x1b[0m", facedwn);
    _svn_dwnref -= 1;
        };
    print!("\x1b[48;5;52m\x1b[38;5;197m    \x1b[0m");
    
    //Linebreaker 
    println!("\x1b[48;5;106m \x1b[0m");

    
    //MESSAGE    
    if holding.len() != 0 {
         let mut _ychar : char = holding.remove(0);
                        let yc_char = _ychar.clone();
                        holding.insert(0, _ychar);
                        if yc_char == joker {
                        let mut _ychar : char = holding.remove(0);
                        let mes = "OK!                          ";
                        message.insert_str(0, mes);
                        } else if yc_char == blnkace {
                        let mut _ychar : char = holding.remove(0);
                        let mes = "New Game!                    ";
                        message.insert_str(0, mes);
                        } else if yc_char == pointer {
                        let mut _ychar : char = holding.remove(0);
                        let mes = "CONGRATULATIONS! YOU WIN!    ";
                        message.insert_str(0, mes);
                        mov.push(crab);
                        };
        match holding.len() {
                0 => (),
                1 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                            match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        
                        fchar.push_str("\x1b[48;5;52m                          \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);

                        },
                2 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m                        \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                3 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m                      \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                        
                4 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m                    \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                        
                5 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m                  \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                        
                6 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m                \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                        
                7 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m              \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                
                8 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m            \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                
                9 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m          \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                
                10 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m        \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                
                11 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m      \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                
                12 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m    \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                
                13 => {  let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                        let mut fchar = "\x1b[48;5;52m->\x1b[0m".to_string();
                        
                        match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);                        fchar.push(spc);
                        fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                           
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                        
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                            fchar.push(rc_char);                        fchar.push(spc);
                            fchar.push_str(another);
                            
                        let rchar : char = holding.remove(0);
                        let rc_char = rchar.clone();
                        holding.push(rchar);
                       match rc_char {
        '\u{1F0DF}' => fchar.push_str(black),
        '\u{1F0A1}' => fchar.push_str(black), 
        '\u{1F0A2}' => fchar.push_str(black),
        '\u{1F0A3}' => fchar.push_str(black), 
        '\u{1F0A4}' => fchar.push_str(black), 
        '\u{1F0A5}' => fchar.push_str(black), 
        '\u{1F0A6}' => fchar.push_str(black), 
        '\u{1F0A7}' => fchar.push_str(black), 
        '\u{1F0A8}' => fchar.push_str(black), 
        '\u{1F0A9}' => fchar.push_str(black), 
        '\u{1F0AA}' => fchar.push_str(black), 
        '\u{1F0AB}' => fchar.push_str(black), 
        '\u{1F0AC}' => fchar.push_str(black), 
        '\u{1F0AD}' => fchar.push_str(black), 
        '\u{1F0AE}' => fchar.push_str(black), 
        '\u{1F0D1}' => fchar.push_str(black), 
        '\u{1F0D2}' => fchar.push_str(black), 
        '\u{1F0D3}' => fchar.push_str(black), 
        '\u{1F0D4}' => fchar.push_str(black),
        '\u{1F0D5}' => fchar.push_str(black),
        '\u{1F0D6}' => fchar.push_str(black),
        '\u{1F0D7}' => fchar.push_str(black),
        '\u{1F0D8}' => fchar.push_str(black),
        '\u{1F0D9}' => fchar.push_str(black),
        '\u{1F0DA}' => fchar.push_str(black),
        '\u{1F0DB}' => fchar.push_str(black),
        '\u{1F0DC}' => fchar.push_str(black),
        '\u{1F0DD}' => fchar.push_str(black),
        '\u{1F0DE}' => fchar.push_str(black),
        _ => fchar.push_str(reed)
                            };
                        fchar.push(rc_char);
                        fchar.push_str(another);
                        fchar.push_str("\x1b[48;5;52m  \x1b[0m");
                        let dchar = fchar.as_mut_str();
                        message.insert_str(0, dchar);
                        
                        },
                
                 _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);  },  
        }; 
        println!("\x1b[48;5;100m \x1b[0m\x1b[48;5;52m\x1b[38;5;106m{}\x1b[0m\x1b[48;5;100m \x1b[0m", message);
     }   else if message == "" {
        let mes = "Invalid: try again           ";
        message.insert_str(0, mes);
    println!("\x1b[48;5;100m \x1b[0m\x1b[48;5;52m\x1b[38;5;106m{}\x1b[0m\x1b[48;5;100m \x1b[0m", message);
    } else if message == "CONGRATULATIONS! YOU WIN!    " { 
    println!("\x1b[48;5;100m \x1b[0m\x1b[48;5;52m\x1b[38;5;106m{}\x1b[0m\x1b[48;5;100m \x1b[0m", message);
    println!("\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;112m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;112m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m");
    break;
    } else { 
    println!("\x1b[48;5;100m \x1b[0m\x1b[48;5;52m\x1b[38;5;106m{}\x1b[0m\x1b[48;5;100m \x1b[0m", message);
    };
    message.clear();
    
    //border
    println!("\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;112m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;112m \x1b[0m\x1b[48;5;106m \x1b[0m\x1b[48;5;100m \x1b[0m\x1b[48;5;130m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;52m \x1b[0m\x1b[48;5;88m \x1b[0m\x1b[48;5;124m \x1b[0m\x1b[0m\x1b[48;5;130m \x1b[0m");
    

    
    if mov.len() == 0 {
    print!("Move from:");
    let _ = stdout().flush();
    io::stdin().read_line(&mut mov).unwrap();
    let moov = mov.to_ascii_uppercase();
    //print!("{}", moov);
    
    match moov.as_str().trim() {
    "A1" | "1 A" | "A 1" | "1A"   => {  
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if one_up.len() != 0 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(0);

            one_up.push(joker);
            holding.append(& mut fng);
            };
        },
    "B1" | "1 B" | "B 1" | "1B"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 1 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 2 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(1);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "C1" | "1 C" | "C 1" | "1C"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 2 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 3 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(2);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "D1" | "1 D" | "D 1" | "1D"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 3 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 4 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(3);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "E1" | "1 E" | "E 1" | "1E"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 4 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 5 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(4);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "F1" | "1 F" | "F 1" | "1F"   => {
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 5 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 6 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(5);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "G1" | "1 G" | "G 1" | "1G"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 6 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 7 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(6);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "H1" | "1 H" | "H 1" | "1H"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 7 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 8 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(7);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "I1" | "1 I" | "I 1" | "1I"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 8 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 9 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(8);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "J1" | "1 J" | "J 1" | "1J"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 9 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 10 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(9);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "K1" | "1 K" | "K 1" | "1K"   => {
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 10 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 11 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(10);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "L1" | "1 L" | "L 1" | "1L"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 11 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 12 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(11);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },
    "M1" | "1 M" | "M 1" | "1M"   => { 
        if one_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() != 0 {
        if one_up.len() <= 12 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if one_up.len() >= 13 { 
            let clm : char = '1';
            clmn_ref.push(clm);    
            let mut fng = one_up.split_off(12);

            one_up.push(joker);
            holding.append(& mut fng);
                };
            };
        },

    "A2" | "2 A" | "A 2" | "2A"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_dwn.len() != 0 { 
        let mes = "Invalid: try again           ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_dwn.len() == 0 { 
            let clm : char = '2';
            clmn_ref.push(clm);    
            let mut fng = two_up.split_off(0);

            two_up.push(joker);
            holding.append(& mut fng);
            };
        },
    
    "B2" | "2 B" | "B 2" | "2B"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
           
        if two_up.len() >= 1 {
            match two_dwn.len() {
            0 => {
                    if two_up.len() == 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(1);                    two_up.push(joker);
                    holding.append(& mut fng); 
                        };
                    },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(0);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
                        },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
        "C2" | "2 C" | "C 2" | "2C"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 2 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(2);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(1);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "D2" | "2 D" | "D 2" | "2D"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 3 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(3);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(2);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "E2" | "2 E" | "E 2" | "2E"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 4 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(4);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(3);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "F2" | "2 F" | "F 2" | "2F"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 5 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(5);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(4);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "G2" | "2 G" | "G 2" | "2G"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 6 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(6);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(5);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "H2" | "2 H" | "H 2" | "2H"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
       if two_up.len() >= 7 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(7);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(6);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
                },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "I2" | "2 I" | "I 2" | "2I"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 8 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(8);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(7);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "J2" | "2 J" | "J 2" | "2J"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 9 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(9);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(8);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "K2" | "2 K" | "K 2" | "2K"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 10 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(10);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(9);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "L2" | "2 L" | "L 2" | "2L"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 11 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(11);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(10);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "M2" | "2 M" | "M 2" | "2M"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if two_up.len() >= 12 {
            match two_dwn.len() {
            0 => {
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(12);                    two_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(11);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "N2" | "2 N" | "N 2" | "2N"   => { 
        if two_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };
        if two_up.len() >= 13 {
            match two_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                            mov.clear();

                    },
            1 => {  
                    let clm : char = '2';
                    clmn_ref.push(clm);    
                    let mut fng = two_up.split_off(12);                    two_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "A3" | "3 A" | "A 3" | "3A"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                    mov.clear();
            };  
        if thr_dwn.len() != 0 { 
        let mes = "Invalid: try again           ";
        message.insert_str(0, mes);
                    mov.clear();
            };  
        if thr_dwn.len() == 0 { 
            let clm : char = '3';
            clmn_ref.push(clm);    
            let mut fng = thr_up.split_off(0);

            thr_up.push(joker);
            holding.append(& mut fng);
            };
        },
    "B3" | "3 B" | "B 3" | "3B"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if thr_up.len() >= 1 {
            match thr_dwn.len() {
            0 => {
            if thr_up.len() == 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(1);                    thr_up.push(joker);
                    holding.append(& mut fng); 
                        };
                    },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(0);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
        "C3" | "3 C" | "C 3" | "3C"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if thr_up.len() >= 1 {
            match thr_dwn.len() {
            0 => {
            if thr_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(2);                    thr_up.push(joker);
                    holding.append(& mut fng); 
                        };
                    },
            1 => {  
             if thr_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(1);                    thr_up.push(joker);
                    holding.append(& mut fng); 
                            };
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(0);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "D3" | "3 D" | "D 3" | "3D"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if thr_up.len() >= 2 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(3);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(2);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(1);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "E3" | "3 E" | "E 3" | "3E"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if thr_up.len() >= 3 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(4);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(3);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(2);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "F3" | "3 F" | "F 3" | "3F"   => { 
       if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 4 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(5);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(4);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(3);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "G3" | "3 G" | "G 3" | "3G"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if thr_up.len() >= 5 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(6);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(5);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(4);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "H3" | "3 H" | "H 3" | "3H"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();

            };  
        if thr_up.len() >= 6 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(7);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(6);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(5);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();

            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();

                };
        },
    "I3" | "3 I" | "I 3" | "3I"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 7 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(8);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(7);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(6);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
    
        },
    
    "J3" | "3 J" | "J 3" | "3J"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 8 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(9);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(8);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(7);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
    
        },
    "K3" | "3 K" | "K 3" | "3K"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 9 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(10);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(9);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(8);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
    
        },
    "L3" | "3 L" | "L 3" | "3L"   => { 
       if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 10 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(11);                    thr_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(10);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(9);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
    
        },
    "M3" | "3 M" | "M 3" | "3M"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 11 {
            match thr_dwn.len() {
            0 => {
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(12);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(11);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(10);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
    
        },
    "N3" | "3 N" | "N 3" | "3N"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 12 {
            match thr_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                            mov.clear();
                        },
            1 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(12);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(11);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
    
        },
    "O3" | "3 O" | "O 3" | "3O"   => { 
        if thr_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if thr_up.len() >= 13 {
            match thr_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                            mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                            mov.clear();
                        },
            2 => {  
                    let clm : char = '3';
                    clmn_ref.push(clm);    
                    let mut fng = thr_up.split_off(12);                    thr_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
    
        },
       "A4" | "4 A" | "A 4" | "4A"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_dwn.len() != 0 { 
        let mes = "Invalid: try again           ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_dwn.len() == 0 { 
            let clm : char = '4';
            clmn_ref.push(clm);    
            let mut fng = for_up.split_off(0);

            for_up.push(joker);
            holding.append(& mut fng);
            };
        },
    "B4" | "4 B" | "B 4" | "4B"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 1 {
            match for_dwn.len() {
            0 => {
                    if for_up.len() == 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(1);                    for_up.push(joker);
                    holding.append(& mut fng); 
                            }; 
                        },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(0);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "C4" | "4 C" | "C 4" | "4C"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 1 {
            match for_dwn.len() {
            0 => {
                    if for_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(2);                    for_up.push(joker);
                    holding.append(& mut fng); 
                            }; 
                        },
            1 => {  
            if for_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(1);                    for_up.push(joker);
                    holding.append(& mut fng); 
                            }; 
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(0);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
            },
    "D4" | "4 D" | "D 4" | "4D"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 1 {
            match for_dwn.len() {
            0 => {
                    if for_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(3);                    for_up.push(joker);
                    holding.append(& mut fng); 
                            }; 
                        },
            1 => {  
                   if for_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(2);                    for_up.push(joker);
                    holding.append(& mut fng); 
                            }; 
                        },
            2 => {  
                if for_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(1);                    for_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(0);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
            },
    "E4" | "4 E" | "E 4" | "4E"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 2 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(4);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(3);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(2);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(1);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);  
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
            },
    "F4" | "4 F" | "F 4" | "4F"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 3 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(5);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(4);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(3);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(2);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "G4" | "4 G" | "G 4" | "4G"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 4 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(6);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(5);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(4);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(3);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "H4" | "4 H" | "H 4" | "4H"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 5 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(7);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(6);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(5);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(4);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "I4" | "4 I" | "I 4" | "4I"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 6 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(8);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(7);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(6);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(5);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "J4" | "4 J" | "J 4" | "4J"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 7 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(9);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(8);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(7);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(6);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "K4" | "4 K" | "J K" | "4K"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 8 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(10);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(9);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(8);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(7);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "L4" | "4 L" | "L 4" | "4L"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 9 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(11);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(10);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(9);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(8);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "M4" | "4 M" | "M 4" | "4M"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 10 {
            match for_dwn.len() {
            0 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(12);                    for_up.push(joker);
                    holding.append(& mut fng); },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(11);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(10);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(9);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
     "N4" | "4 N" | "N 4" | "4N"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 11 {
            match for_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                },
            1 => {  
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(12);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(11);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(10);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "O4" | "4 O" | "O 4" | "4O"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 12 {
            match for_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes); 
                        mov.clear();
                },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                        },
            2 => {  
                let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(12);                    for_up.push(joker);
                    holding.append(& mut fng);

                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(11);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "P4" | "4 P" | "P 4" | "4P"   => { 
        if for_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if for_up.len() >= 13 {
            match for_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes); 
                        mov.clear();
                },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                        },
            2 => {  
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                        },
            3 => {
                    let clm : char = '4';
                    clmn_ref.push(clm);    
                    let mut fng = for_up.split_off(12);                    for_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "A5" | "5 A" | "A 5" | "5A"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_dwn.len() != 0 { 
        let mes = "Invalid: try again           ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_dwn.len() == 0 { 
            let clm : char = '5';
            clmn_ref.push(clm);    
            let mut fng = fve_up.split_off(0);

            fve_up.push(joker);
            holding.append(& mut fng);
            };
        },
    "B5" | "5 B" | "B 5" | "5B"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_up.len() >= 1 {
            match fve_dwn.len() {
            0 => {
                    if fve_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(1);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(0);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "C5" | "5 C" | "C 5" | "5C"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_up.len() >= 1 {
            match fve_dwn.len() {
            0 => {
                    if fve_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(2);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if fve_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(1);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(0);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "D5" | "5 D" | "D 5" | "5D"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_up.len() >= 1 {
            match fve_dwn.len() {
            0 => {
                     if fve_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(3);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                     if fve_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(2);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                     if fve_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(1);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(0);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                                mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "E5" | "5 E" | "E 5" | "5E"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_up.len() >= 1 {
            match fve_dwn.len() {
            0 => {
                    if fve_up.len() <= 4 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(4);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                     if fve_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(3);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                     if fve_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(2);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    if fve_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(1);                    fve_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(0);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();},
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "F5" | "5 F" | "F 5" | "5F"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_up.len() >= 2 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(5);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(4);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(3);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(2);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(1);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();},
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "G5" | "5 G" | "G 5" | "5G"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
                mov.clear();
            };  
        if fve_up.len() >= 3 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(6);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(5);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(4);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(3);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(2);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
                    mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                        mov.clear();
                };
        },
    "H5" | "5 H" | "H 5" | "5H"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 4 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(7);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(6);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(5);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(4);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(3);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "I5" | "5 I" | "I 5" | "5I"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 5 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(8);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(7);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(6);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(5);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(4);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "J5" | "5 J" | "J 5" | "5J"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 6 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(9);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(8);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(7);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(6);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(5);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "K5" | "5 K" | "K 5" | "5K"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 7 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(10);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(9);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(8);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(7);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(6);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "L5" | "5 L" | "L 5" | "5L"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 8 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(11);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(10);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(9);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(8);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(7);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "M5" | "5 M" | "M 5" | "5M"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 9 {
            match fve_dwn.len() {
            0 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(12);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(11);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(10);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(9);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(8);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "N5" | "5 N" | "N 5" | "5N"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 10 {
            match fve_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            1 => {  
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(12);                    fve_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(11);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(10);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(9);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "O5" | "5 O" | "O 5" | "5O"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 11 {
            match fve_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            2 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(12);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(11);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(10);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "P5" | "5 P" | "P 5" | "5P"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 12 {
            match fve_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            2 => {  
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            3 => {
                    let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(12);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(11);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "Q5" | "5 Q" | "Q 5" | "5Q"   => { 
        if fve_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if fve_up.len() >= 13 {
            match fve_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            2 => {  
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            3 => {
                    let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                        },
            4 => {  
                let clm : char = '5';
                    clmn_ref.push(clm);    
                    let mut fng = fve_up.split_off(12);                    fve_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "A6" | "6 A" | "A 6" | "6A"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_dwn.len() != 0 { 
        let mes = "Invalid: try again           ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_dwn.len() == 0 { 
            let clm : char = '6';
            clmn_ref.push(clm);    
            let mut fng = six_up.split_off(0);

            six_up.push(joker);
            holding.append(& mut fng);
            };
        },
    "B6" | "6 B" | "B 6" | "6B"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 1 {
            match six_dwn.len() {
            0 => {
                    if six_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(1);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(0);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "C6" | "6 C" | "C 6" | "6C"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 1 {
            match six_dwn.len() {
            0 => {
                    if six_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(2);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if six_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(1);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(0);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "D6" | "6 D" | "D 6" | "6D"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 1 {
            match six_dwn.len() {
            0 => {
                    if six_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(3);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if six_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(2);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                if six_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(1);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(0);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "E6" | "6 E" | "E 6" | "6E"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 1 {
            match six_dwn.len() {
            0 => {
                    if six_up.len() <= 4 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(4);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if six_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(3);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                    if six_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(2);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    if six_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(1);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(0);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "F6" | "6 F" | "F 6" | "6F"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 1 {
            match six_dwn.len() {
            0 => {
                    if six_up.len() <= 5 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(5);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if six_up.len() <= 4 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(4);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                    if six_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(3);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    if six_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(2);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            4 => {  
                    if six_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(1);                    six_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            5 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(0);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "G6" | "6 G" | "G 6" | "6G"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 2 {
            match six_dwn.len() {
            0 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(6);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(5);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(4);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(3);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(2);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(1);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "H6" | "6 H" | "H 6" | "6H"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 3 {
            match six_dwn.len() {
            0 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(7);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(6);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(5);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(4);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(3);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(2);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "I6" | "6 I" | "I 6" | "6I"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 4 {
            match six_dwn.len() {
            0 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(8);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(7);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(6);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(5);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(4);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(3);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "J6" | "6 J" | "J 6" | "6J"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 5 {
            match six_dwn.len() {
            0 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(9);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(8);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(7);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(6);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(5);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(4);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "K6" | "6 K" | "K 6" | "6K"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 6 {
            match six_dwn.len() {
            0 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(10);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(9);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(8);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(7);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(6);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(5);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "L6" | "6 L" | "L 6" | "6L"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 7 {
            match six_dwn.len() {
            0 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(11);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(10);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(9);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(8);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(7);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(6);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "M6" | "6 M" | "M 6" | "6M"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 8 {
            match six_dwn.len() {
            0 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(12);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(11);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(10);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(9);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(8);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(7);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "N6" | "6 N" | "N 6" | "6N"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 9 {
            match six_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            1 => {  
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(12);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(11);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(10);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(9);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(8);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "O6" | "6 O" | "O 6" | "6O"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 10 {
            match six_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
            mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            2 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(12);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(11);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(10);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(9);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "P6" | "6 P" | "P 6" | "6P"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 11 {
            match six_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);  
            mov.clear();
                        },
            2 => {  
               let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);
            mov.clear();
                        },
            3 => {
                    let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(12);                    six_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(11);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(10);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "Q6" | "6 Q" | "Q 6" | "6Q"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 12 {
            match six_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);  
            mov.clear();
                        },
            2 => {  
               let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            3 => {
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            4 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(12);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(11);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "R6" | "6 R" | "R 6" | "6R"   => { 
        if six_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if six_up.len() >= 13 {
            match six_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes);  
            mov.clear();
                        },
            2 => {  
               let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            3 => {
                    let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            4 => {  
                let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
                        },
            5 => {  
                let clm : char = '6';
                    clmn_ref.push(clm);    
                    let mut fng = six_up.split_off(12);                    six_up.push(joker);
                    holding.append(& mut fng); 
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();},
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
        "A7" | "7 A" | "A 7" | "7A"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_dwn.len() != 0 { 
        let mes = "Invalid: try again           ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_dwn.len() == 0 { 
            let clm : char = '7';
            clmn_ref.push(clm);    
            let mut fng = svn_up.split_off(0);

            svn_up.push(joker);
            holding.append(& mut fng);
            };
        },
    "B7" | "7 B" | "B 7" | "7B"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 1 {
            match svn_dwn.len() {
            0 => {
                    if svn_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(1);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(0);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            6 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "C7" | "7 C" | "C 7" | "7C"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 1 {
            match svn_dwn.len() {
            0 => {
                    if svn_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(2);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if svn_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(1);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(0);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            6 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "D7" | "7 D" | "D 7" | "7D"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 1 {
            match svn_dwn.len() {
            0 => {
                    if svn_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(3);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if svn_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(2);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                    if svn_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(1);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(0);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            6 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "E7" | "7 E" | "E 7" | "7E"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 1 {
            match svn_dwn.len() {
            0 => {
                    if svn_up.len() <= 4 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(4);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if svn_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(3);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                    if svn_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(2);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    if svn_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(1);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(0);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
            6 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "F7" | "7 F" | "F 7" | "7F"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 1 {
            match svn_dwn.len() {
            0 => {
                    if svn_up.len() <= 5 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(5);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if svn_up.len() <= 4 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(4);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                    if svn_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(3);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    if svn_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(2);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            4 => {  
                    if svn_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(1);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(0);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let mes = "Invalid: try again           ";
                        message.insert_str(0, mes);
                        mov.clear();
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "G7" | "7 G" | "G 7" | "7G"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 1 {
            match svn_dwn.len() {
            0 => {
                    if svn_up.len() <= 6 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(6);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            1 => {  
                    if svn_up.len() <= 5 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(5);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            2 => {  
                    if svn_up.len() <= 4 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(4);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            3 => {
                    if svn_up.len() <= 3 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(3);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            4 => {  
                    if svn_up.len() <= 2 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(2);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            5 => {  
                    if svn_up.len() <= 1 {
                        let mes = "Invalid: No Card to draw     ";
                        message.insert_str(0, mes);
                        mov.clear();
                        } else {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(1);                    svn_up.push(joker);
                    holding.append(& mut fng);
                            };
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(0);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "H7" | "7 H" | "H 7" | "7H"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 2 {
            match svn_dwn.len() {
            0 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(7);                    svn_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(6);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(5);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(4);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(3);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(2);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(1);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "I7" | "7 I" | "I 7" | "7I"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 3 {
            match svn_dwn.len() {
            0 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(8);                    svn_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(7);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(6);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(5);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(4);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(3);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(2);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "J7" | "7 J" | "J 7" | "7J"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 4 {
            match svn_dwn.len() {
            0 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(9);                    svn_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(8);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(7);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(6);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(5);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(4);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(3);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "K7" | "7 K" | "K 7" | "7K"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 5 {
            match svn_dwn.len() {
            0 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(10);                    svn_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(9);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(8);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(7);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(6);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(5);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(4);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "L7" | "7 L" | "L 7" | "7L"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 6 {
            match svn_dwn.len() {
            0 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(11);                    svn_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(10);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(9);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(8);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(7);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(6);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(5);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "M7" | "7 M" | "M 7" | "7M"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 7 {
            match svn_dwn.len() {
            0 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(12);                    svn_up.push(joker);
                    holding.append(& mut fng); 
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(11);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(10);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(9);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(8);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(7);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(6);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "N7" | "7 N" | "N 7" | "7N"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 8 {
            match svn_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            1 => {  
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(12);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(11);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(10);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(9);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(8);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(7);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "O7" | "7 O" | "O 7" | "7O"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 9 {
            match svn_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            1 => {  
                   let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            2 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(12);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(11);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(10);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(9);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(8);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "P7" | "7 P" | "P 7" | "7P"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 10 {
            match svn_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            2 => {  
                 let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            3 => {
                    let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(12);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(11);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(10);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(9);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "Q7" | "7 Q" | "Q 7" | "7Q"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 11 {
            match svn_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            2 => {  
                 let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            3 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            4 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(12);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(11);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(10);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "R7" | "7 R" | "R 7" | "7R"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 12 {
            match svn_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            2 => {  
                 let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            3 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            4 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            5 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(12);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(11);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "S7" | "7 S" | "S 7" | "7S"   => { 
        if svn_up.len() == 0 { 
        let mes = "Invalid: No Card to draw     ";
        message.insert_str(0, mes);
        mov.clear();
            };  
        if svn_up.len() >= 13 {
            match svn_dwn.len() {
            0 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            1 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            2 => {  
                 let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            3 => {
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            4 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            5 => {  
                    let mes = "Invalid: No Card to draw     ";
                    message.insert_str(0, mes);
                    mov.clear();
                        },
            6 => {  
                let clm : char = '7';
                    clmn_ref.push(clm);    
                    let mut fng = svn_up.split_off(12);                    svn_up.push(joker);
                    holding.append(& mut fng);
                        },
           _ => { let mes = "Invalid: No Card to draw     ";
            message.insert_str(0, mes); 
            mov.clear();
            },
                    };
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
    "U" =>  {
        let spdpop = homespd.pop().unwrap();
        if spdpop == blnkace {
            homespd.push(spdpop);
            let mes = "Invalid: try again           ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = 'U';
                        clmn_ref.push(clm);    
                        holding.push(spdpop);
                    };
       },
    "V" =>  {
        let dmdpop = homedmd.pop().unwrap();
        if dmdpop == blnkace {
            homedmd.push(dmdpop);
            let mes = "Invalid: try again           ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = 'V';
                        clmn_ref.push(clm);    
                        holding.push(dmdpop);
                    };
       },
    "W" =>  {
        let clbpop = homeclb.pop().unwrap();
        if clbpop == blnkace {
            homeclb.push(clbpop);
            let mes = "Invalid: try again           ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = 'W';
                        clmn_ref.push(clm);    
                        holding.push(clbpop);
                    };
       },
    "X" =>  {
        let hrtpop = homehrt.pop().unwrap();
        if hrtpop == blnkace {
            homehrt.push(hrtpop);
            let mes = "Invalid: try again           ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = 'X';
                        clmn_ref.push(clm);    
                        holding.push(hrtpop);
                    };
       },
    "Z" => { 
    if maindeck.len() == 0 {
        if maindeck.len() + discard.len() == 0 {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
            loop {
                if discard.len() == 0 {
              break;
              }; 
                if discard.len() != 0 {
                let dscrmv = discard.pop().unwrap();
                maindeck.push(dscrmv);
                };
              
              continue;
              
            };
        };
        if maindeck.len() != 0 {
        let mdkpop = maindeck.pop().unwrap();
        discard.push(mdkpop);
        let mes = "New Card                     ";
        message.insert_str(0, mes);
        mov.clear();
        };
    },
    
    "Y" => {
    if discard.len() != 0 {
        let clm : char = 'Y';
        clmn_ref.push(clm);    
        let dscpop = discard.pop().unwrap();
        holding.push(dscpop);
                } else {
                let mes = "Invalid: No Card to draw     ";
                message.insert_str(0, mes);
                mov.clear();
                };
        },
        "1" =>  {
        if one_up.len() == 0 {
            let mes = "Invalid: no card             ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = '1';
                        clmn_ref.push(clm);    
                        let onepop = one_up.pop().unwrap();
                        holding.push(onepop);
                    };
       },
        "2" =>  {
        if two_up.len() == 0 {
            let mes = "Invalid: no card             ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = '2';
                        clmn_ref.push(clm);
                        let twopop = two_up.pop().unwrap();
                        holding.push(twopop);
                        two_up.push(joker);
                    };
       },
        "3" =>  {
        if thr_up.len() == 0 {
            let mes = "Invalid: no card             ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = '3';
                        clmn_ref.push(clm);
                        let thrpop = thr_up.pop().unwrap();
                        holding.push(thrpop);
                        thr_up.push(joker);
                    };
       },
        "4" =>  {
        if for_up.len() == 0 {
            let mes = "Invalid: no card             ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = '4';
                        clmn_ref.push(clm);
                        let forpop = for_up.pop().unwrap();
                        holding.push(forpop);
                        for_up.push(joker);
                    };
       },
        "5" =>  {
        if fve_up.len() == 0 {
            let mes = "Invalid: no card             ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = '5';
                        clmn_ref.push(clm);
                        let fvepop = fve_up.pop().unwrap();
                        holding.push(fvepop);
                        fve_up.push(joker);
                    };
       },
        "6" =>  {
        if six_up.len() == 0 {
            let mes = "Invalid: no card             ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = '6';
                        clmn_ref.push(clm);
                        let sixpop = six_up.pop().unwrap();
                        holding.push(sixpop);
                        six_up.push(joker);
                    };
       },
        "7" =>  {
        if svn_up.len() == 0 {
            let mes = "Invalid: no card             ";
            message.insert_str(0, mes);
            mov.clear();
        } else {
                        let clm : char = '7';
                        clmn_ref.push(clm);
                        let svnpop = svn_up.pop().unwrap();
                        holding.push(svnpop);
                        svn_up.push(joker);
                    };
       },
   _ => { let mes = "Invalid: try again           ";
            message.insert_str(0, mes); 
            mov.clear();
            },
   };
      
   continue;
   
};
            
     
     

     
if mov.len() != 0 {
    if homespd.len() + homedmd.len() + homeclb.len() + homehrt.len() >= 56 { 
    break;
    };
    print!("Move to:");
    let _ = stdout().flush();
    io::stdin().read_line(&mut mov2).unwrap();
    let moov2 = mov2.to_ascii_uppercase();
    
match moov2.as_str().trim() {
        "1" | "A1" | "B1" | "C1" | "D1" | "E1" | "F1" | "G1" | "H1" | "I1" | "J1" | "K1" | "L1" | "M1" | "N1" | "O1" | "P1" | "Q1" | "R1" | "S1" | "A 1" | "B 1" | "C 1" | "D 1" | "E 1" | "F 1" | "G 1" | "H 1" | "I 1" | "J 1" | "K 1" | "L 1" | "M 1" | "N 1" | "O 1" | "P 1" | "Q 1" | "R 1" | "S 1" | "1A" | "1B" | "1C" | "1D" | "1E" | "1F" | "1G" | "1H" | "1I" | "1J" | "1K" | "1L" | "1M" | "1N" | "1O" | "1P" | "1Q" | "1R" | "1S" | "1 A" | "1 B" | "1 C" | "1 D" | "1 E" | "1 F" | "1 G" | "1 H" | "1 I" | "1 J" | "1 K" | "1 L" | "1 M" | "1 N" | "1 O" | "1 P" | "1 Q" | "1 R" | "1 S"  => {
            let hcrd = holding.remove(0);
            let hccrd = hcrd.clone();
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);

        if clmn_ref == "1" {
             one_up.append(& mut holding);
                holding.clear();
               //holding.push(joker);
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
        }   else if one_up.len() == 0 {
    match hccrd {
        '\u{1F0CE}' | '\u{1F0AE}' | '\u{1F0DE}' | '\u{1F0BE}' => {
                one_up.append(& mut holding);
                holding.clear();
                holding.push(joker);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                },
                    _ => {  
                let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                    match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

                    _ => (),
                        };
                    },
               };
          }     
       else if one_up.len() != 0 {
            let veccrd = one_up.pop().unwrap();
            let vvecrd = veccrd.clone();
            one_up.push(veccrd);
                match vvecrd {
                /////twospd
            '\u{1F0A2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twoclb
        '\u{1F0D2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twohrt
        '\u{1F0B2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twodmd
        '\u{1F0C2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrspd
        '\u{1F0A3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrclb
        '\u{1F0D3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrhrt
        '\u{1F0B3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrdmd
        '\u{1F0C3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
         /////forspd
        '\u{1F0A4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forclb
        '\u{1F0D4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forhrt
        '\u{1F0B4}' => { 
                    match hc3rd { 
                    ////thrspd
                    '\u{1F0A3}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrclb
                    '\u{1F0D3}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fordmd
        '\u{1F0C4}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A3}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D3}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////fvespd
        '\u{1F0A5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fveclb
        '\u{1F0D5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvehrt
        '\u{1F0B5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvedmd
        '\u{1F0C5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////sixspd
        '\u{1F0A6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixclb
        '\u{1F0D6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixhrt
        '\u{1F0B6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixdmd
        '\u{1F0C6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////svnspd
        '\u{1F0A7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnclb
        '\u{1F0D7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnhrt
        '\u{1F0B7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svndmd
        '\u{1F0C7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////atespd
        '\u{1F0A8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ateclb
        '\u{1F0D8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atehrt
        '\u{1F0B8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atedmd
        '\u{1F0C8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////ninspd
        '\u{1F0A9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninclb
        '\u{1F0D9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninhrt
        '\u{1F0B9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////nindmd
        '\u{1F0C9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////tenspd
        '\u{1F0AA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenclb
        '\u{1F0DA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenhrt
        '\u{1F0BA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tendmd
        '\u{1F0CA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////jakspd
        '\u{1F0AB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakclb
        '\u{1F0DB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakhrt
        '\u{1F0BB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakdmd
        '\u{1F0CB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////qwnspd
        '\u{1F0AD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnclb
        '\u{1F0DD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnhrt
        '\u{1F0BD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwndmd
        '\u{1F0CD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////kngspd
        '\u{1F0AE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngclb
        '\u{1F0DE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////knghrt
        '\u{1F0BE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngdmd
        '\u{1F0CE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {    
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    one_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ALL ACES FAIL, CANNOT APPEND TO ON FIELD
        '\u{1F0C1}' | '\u{1F0A1}' | '\u{1F0B1}' | '\u{1F0D1}' => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
        /////CAN PROBABLY REMOVE THIS ERROR HANDLE, ALL CARDS WILL 
        /////MATCH
            _ => (),
            };
        };
    },
    
    "2" | "A2" | "B2" | "C2" | "D2" | "E2" | "F2" | "G2" | "H2" | "I2" | "J2" | "K2" | "L2" | "M2" | "N2" | "O2" | "P2" | "Q2" | "R2" | "S2" | "A 2" | "B 2" | "C 2" | "D 2" | "E 2" | "F 2" | "G 2" | "H 2" | "I 2" | "J 2" | "K 2" | "L 2" | "M 2" | "N 2" | "O 2" | "P 2" | "Q 2" | "R 2" | "S 2" | "2A" | "2B" | "2C" | "2D" | "2E" | "2F" | "2G" | "2H" | "2I" | "2J" | "2K" | "2L" | "2M" | "2N" | "2O" | "2P" | "2Q" | "2R" | "2S" | "2 A" | "2 B" | "2 C" | "2 D" | "2 E" | "2 F" | "2 G" | "2 H" | "2 I" | "2 J" | "2 K" | "2 L" | "2 M" | "2 N" | "2 O" | "2 P" | "2 Q" | "2 R" | "2 S"  => {
            let hcrd = holding.remove(0);
            let hccrd = hcrd.clone();
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "2" {
            ////change
             two_up.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                ////change
        }   else if two_up.len() == 0 {
    match hccrd {
        '\u{1F0CE}' | '\u{1F0AE}' | '\u{1F0DE}' | '\u{1F0BE}' => {
                ////change
                two_up.append(& mut holding);
                holding.clear();
                holding.push(joker);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                },
                    _ => {  
                let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                    match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

                    _ => (),
                        };
                    },
               };
          }     
            ////change
       else if two_up.len() != 0 {
                        ////change
            let veccrd = two_up.pop().unwrap();
            let vvecrd = veccrd.clone();
            ////change
            two_up.push(veccrd);
                match vvecrd {
                //////ALL ACES FAIL
                /////twospd
            '\u{1F0A2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twoclb
        '\u{1F0D2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twohrt
        '\u{1F0B2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twodmd
        '\u{1F0C2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrspd
        '\u{1F0A3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrclb
        '\u{1F0D3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                   ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrhrt
        '\u{1F0B3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrdmd
        '\u{1F0C3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
         /////forspd
        '\u{1F0A4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forclb
        '\u{1F0D4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forhrt
        '\u{1F0B4}' => { 
                    match hc3rd { 
                    ////thrspd
                    '\u{1F0A3}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrclb
                    '\u{1F0D3}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fordmd
        '\u{1F0C4}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A3}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D3}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////fvespd
        '\u{1F0A5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fveclb
        '\u{1F0D5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvehrt
        '\u{1F0B5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvedmd
        '\u{1F0C5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////sixspd
        '\u{1F0A6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixclb
        '\u{1F0D6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixhrt
        '\u{1F0B6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixdmd
        '\u{1F0C6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////svnspd
        '\u{1F0A7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnclb
        '\u{1F0D7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnhrt
        '\u{1F0B7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svndmd
        '\u{1F0C7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////atespd
        '\u{1F0A8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ateclb
        '\u{1F0D8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atehrt
        '\u{1F0B8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atedmd
        '\u{1F0C8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////ninspd
        '\u{1F0A9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninclb
        '\u{1F0D9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninhrt
        '\u{1F0B9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////nindmd
        '\u{1F0C9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////tenspd
        '\u{1F0AA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenclb
        '\u{1F0DA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenhrt
        '\u{1F0BA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tendmd
        '\u{1F0CA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////jakspd
        '\u{1F0AB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakclb
        '\u{1F0DB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakhrt
        '\u{1F0BB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakdmd
        '\u{1F0CB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////qwnspd
        '\u{1F0AD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => { 
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnclb
        '\u{1F0DD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {   
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnhrt
        '\u{1F0BD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwndmd
        '\u{1F0CD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////kngspd
        '\u{1F0AE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngclb
        '\u{1F0DE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////knghrt
        '\u{1F0BE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngdmd
        '\u{1F0CE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {  
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    two_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ALL ACES FAIL, CANNOT APPEND TO ON FIELD
        '\u{1F0C1}' | '\u{1F0A1}' | '\u{1F0B1}' | '\u{1F0D1}' => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
        /////CAN PROBABLY REMOVE THIS ERROR HANDLE, ALL CARDS WILL 
        /////MATCH
            _ => (),
            };
        };
    },
    
    "3" | "A3" | "B3" | "C3" | "D3" | "E3" | "F3" | "G3" | "H3" | "I3" | "J3" | "K3" | "L3" | "M3" | "N3" | "O3" | "P3" | "Q3" | "R3" | "S3" | "A 3" | "B 3" | "C 3" | "D 3" | "E 3" | "F 3" | "G 3" | "H 3" | "I 3" | "J 3" | "K 3" | "L 3" | "M 3" | "N 3" | "O 3" | "P 3" | "Q 3" | "R 3" | "S 3" | "3A" | "3B" | "3C" | "3D" | "3E" | "3F" | "3G" | "3H" | "3I" | "3J" | "3K" | "3L" | "3M" | "3N" | "3O" | "3P" | "3Q" | "3R" | "3S" | "3 A" | "3 B" | "3 C" | "3 D" | "3 E" | "3 F" | "3 G" | "3 H" | "3 I" | "3 J" | "3 K" | "3 L" | "3 M" | "3 N" | "3 O" | "3 P" | "3 Q" | "3 R" | "3 S"  => {
    let hcrd = holding.remove(0);
            let hccrd = hcrd.clone();
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "3" {
            ////change
             thr_up.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                ////change
        }   else if thr_up.len() == 0 {
    match hccrd {
        '\u{1F0CE}' | '\u{1F0AE}' | '\u{1F0DE}' | '\u{1F0BE}' => {
                ////change
                thr_up.append(& mut holding);
                holding.clear();
                holding.push(joker);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                },
                    _ => {  
                let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                    match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

                    _ => (),
                        };
                    },
               };
          }     
            ////change
       else if thr_up.len() != 0 {
                        ////change
            let veccrd = thr_up.pop().unwrap();
            let vvecrd = veccrd.clone();
            ////change
            thr_up.push(veccrd);
                match vvecrd {
                //////ALL ACES FAIL
                /////twospd
            '\u{1F0A2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twoclb
        '\u{1F0D2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twohrt
        '\u{1F0B2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twodmd
        '\u{1F0C2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrspd
        '\u{1F0A3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrclb
        '\u{1F0D3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                   ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrhrt
        '\u{1F0B3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrdmd
        '\u{1F0C3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
         /////forspd
        '\u{1F0A4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forclb
        '\u{1F0D4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forhrt
        '\u{1F0B4}' => { 
                    match hc3rd { 
                    ////thrspd
                    '\u{1F0A3}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrclb
                    '\u{1F0D3}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fordmd
        '\u{1F0C4}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A3}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D3}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////fvespd
        '\u{1F0A5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fveclb
        '\u{1F0D5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvehrt
        '\u{1F0B5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvedmd
        '\u{1F0C5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////sixspd
        '\u{1F0A6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixclb
        '\u{1F0D6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixhrt
        '\u{1F0B6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixdmd
        '\u{1F0C6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////svnspd
        '\u{1F0A7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnclb
        '\u{1F0D7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnhrt
        '\u{1F0B7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svndmd
        '\u{1F0C7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////atespd
        '\u{1F0A8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ateclb
        '\u{1F0D8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atehrt
        '\u{1F0B8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atedmd
        '\u{1F0C8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////ninspd
        '\u{1F0A9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninclb
        '\u{1F0D9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninhrt
        '\u{1F0B9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////nindmd
        '\u{1F0C9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////tenspd
        '\u{1F0AA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenclb
        '\u{1F0DA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenhrt
        '\u{1F0BA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tendmd
        '\u{1F0CA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////jakspd
        '\u{1F0AB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakclb
        '\u{1F0DB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakhrt
        '\u{1F0BB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakdmd
        '\u{1F0CB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////qwnspd
        '\u{1F0AD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => { 
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnclb
        '\u{1F0DD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {   
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnhrt
        '\u{1F0BD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwndmd
        '\u{1F0CD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////kngspd
        '\u{1F0AE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngclb
        '\u{1F0DE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////knghrt
        '\u{1F0BE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngdmd
        '\u{1F0CE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {  
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    thr_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ALL ACES FAIL, CANNOT APPEND TO ON FIELD
        '\u{1F0C1}' | '\u{1F0A1}' | '\u{1F0B1}' | '\u{1F0D1}' => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
        /////CAN PROBABLY REMOVE THIS ERROR HANDLE, ALL CARDS WILL 
        /////MATCH
            _ => (),
            };
        };
    },
    
    "4" | "A4" | "B4" | "C4" | "D4" | "E4" | "F4" | "G4" | "H4" | "I4" | "J4" | "K4" | "L4" | "M4" | "N4" | "O4" | "P4" | "Q4" | "R4" | "S4" | "A 4" | "B 4" | "C 4" | "D 4" | "E 4" | "F 4" | "G 4" | "H 4" | "I 4" | "J 4" | "K 4" | "L 4" | "M 4" | "N 4" | "O 4" | "P 4" | "Q 4" | "R 4" | "S 4" | "4A" | "4B" | "4C" | "4D" | "4E" | "4F" | "4G" | "4H" | "4I" | "4J" | "4K" | "4L" | "4M" | "4N" | "4O" | "4P" | "4Q" | "4R" | "4S" | "4 A" | "4 B" | "4 C" | "4 D" | "4 E" | "4 F" | "4 G" | "4 H" | "4 I" | "4 J" | "4 K" | "4 L" | "4 M" | "4 N" | "4 O" | "4 P" | "4 Q" | "4 R" | "4 S"  => {
    
 let hcrd = holding.remove(0);
            let hccrd = hcrd.clone();
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "4" {
            ////change
             for_up.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                ////change
        }   else if for_up.len() == 0 {
    match hccrd {
        '\u{1F0CE}' | '\u{1F0AE}' | '\u{1F0DE}' | '\u{1F0BE}' => {
                ////change
                for_up.append(& mut holding);
                holding.clear();
                holding.push(joker);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                },
                    _ => {  
                let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                    match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

                    _ => (),
                        };
                    },
               };
          }     
            ////change
       else if for_up.len() != 0 {
                        ////change
            let veccrd = for_up.pop().unwrap();
            let vvecrd = veccrd.clone();
            ////change
            for_up.push(veccrd);
                match vvecrd {
                //////ALL ACES FAIL
                /////twospd
            '\u{1F0A2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twoclb
        '\u{1F0D2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twohrt
        '\u{1F0B2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twodmd
        '\u{1F0C2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrspd
        '\u{1F0A3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrclb
        '\u{1F0D3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                   ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrhrt
        '\u{1F0B3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrdmd
        '\u{1F0C3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
         /////forspd
        '\u{1F0A4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forclb
        '\u{1F0D4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forhrt
        '\u{1F0B4}' => { 
                    match hc3rd { 
                    ////thrspd
                    '\u{1F0A3}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrclb
                    '\u{1F0D3}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fordmd
        '\u{1F0C4}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A3}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D3}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////fvespd
        '\u{1F0A5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fveclb
        '\u{1F0D5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvehrt
        '\u{1F0B5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvedmd
        '\u{1F0C5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////sixspd
        '\u{1F0A6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixclb
        '\u{1F0D6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixhrt
        '\u{1F0B6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixdmd
        '\u{1F0C6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////svnspd
        '\u{1F0A7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnclb
        '\u{1F0D7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnhrt
        '\u{1F0B7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svndmd
        '\u{1F0C7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////atespd
        '\u{1F0A8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ateclb
        '\u{1F0D8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atehrt
        '\u{1F0B8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atedmd
        '\u{1F0C8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////ninspd
        '\u{1F0A9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninclb
        '\u{1F0D9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninhrt
        '\u{1F0B9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////nindmd
        '\u{1F0C9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////tenspd
        '\u{1F0AA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenclb
        '\u{1F0DA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenhrt
        '\u{1F0BA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tendmd
        '\u{1F0CA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////jakspd
        '\u{1F0AB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakclb
        '\u{1F0DB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakhrt
        '\u{1F0BB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakdmd
        '\u{1F0CB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////qwnspd
        '\u{1F0AD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => { 
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnclb
        '\u{1F0DD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {   
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnhrt
        '\u{1F0BD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwndmd
        '\u{1F0CD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////kngspd
        '\u{1F0AE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngclb
        '\u{1F0DE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////knghrt
        '\u{1F0BE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngdmd
        '\u{1F0CE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {  
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    for_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ALL ACES FAIL, CANNOT APPEND TO ON FIELD
        '\u{1F0C1}' | '\u{1F0A1}' | '\u{1F0B1}' | '\u{1F0D1}' => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
        /////CAN PROBABLY REMOVE THIS ERROR HANDLE, ALL CARDS WILL 
        /////MATCH
            _ => (),
            };
        };
    },
    
    "5" | "A5" | "B5" | "C5" | "D5" | "E5" | "F5" | "G5" | "H5" | "I5" | "J5" | "K5" | "L5" | "M5" | "N5" | "O5" | "P5" | "Q5" | "R5" | "S5" | "A 5" | "B 5" | "C 5" | "D 5" | "E 5" | "F 5" | "G 5" | "H 5" | "I 5" | "J 5" | "K 5" | "L 5" | "M 5" | "N 5" | "O 5" | "P 5" | "Q 5" | "R 5" | "S 5" | "5A" | "5B" | "5C" | "5D" | "5E" | "5F" | "5G" | "5H" | "5I" | "5J" | "5K" | "5L" | "5M" | "5N" | "5O" | "5P" | "5Q" | "5R" | "5S" | "5 A" | "5 B" | "5 C" | "5 D" | "5 E" | "5 F" | "5 G" | "5 H" | "5 I" | "5 J" | "5 K" | "5 L" | "5 M" | "5 N" | "5 O" | "5 P" | "5 Q" | "5 R" | "5 S"  => {
    
    let hcrd = holding.remove(0);
            let hccrd = hcrd.clone();
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "5" {
            ////change
             fve_up.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                ////change
        }   else if fve_up.len() == 0 {
    match hccrd {
        '\u{1F0CE}' | '\u{1F0AE}' | '\u{1F0DE}' | '\u{1F0BE}' => {
                ////change
                fve_up.append(& mut holding);
                holding.clear();
                holding.push(joker);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                },
                    _ => {  
                let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                    match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

                    _ => (),
                        };
                    },
               };
          }     
            ////change
       else if fve_up.len() != 0 {
                        ////change
            let veccrd = fve_up.pop().unwrap();
            let vvecrd = veccrd.clone();
            ////change
            fve_up.push(veccrd);
                match vvecrd {
                //////ALL ACES FAIL
                /////twospd
            '\u{1F0A2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twoclb
        '\u{1F0D2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twohrt
        '\u{1F0B2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twodmd
        '\u{1F0C2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrspd
        '\u{1F0A3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrclb
        '\u{1F0D3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                   ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrhrt
        '\u{1F0B3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrdmd
        '\u{1F0C3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
         /////forspd
        '\u{1F0A4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forclb
        '\u{1F0D4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forhrt
        '\u{1F0B4}' => { 
                    match hc3rd { 
                    ////thrspd
                    '\u{1F0A3}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrclb
                    '\u{1F0D3}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fordmd
        '\u{1F0C4}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A3}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D3}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////fvespd
        '\u{1F0A5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fveclb
        '\u{1F0D5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvehrt
        '\u{1F0B5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvedmd
        '\u{1F0C5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////sixspd
        '\u{1F0A6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixclb
        '\u{1F0D6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixhrt
        '\u{1F0B6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixdmd
        '\u{1F0C6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////svnspd
        '\u{1F0A7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnclb
        '\u{1F0D7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnhrt
        '\u{1F0B7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svndmd
        '\u{1F0C7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////atespd
        '\u{1F0A8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ateclb
        '\u{1F0D8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atehrt
        '\u{1F0B8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atedmd
        '\u{1F0C8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////ninspd
        '\u{1F0A9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninclb
        '\u{1F0D9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninhrt
        '\u{1F0B9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////nindmd
        '\u{1F0C9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////tenspd
        '\u{1F0AA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenclb
        '\u{1F0DA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenhrt
        '\u{1F0BA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tendmd
        '\u{1F0CA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////jakspd
        '\u{1F0AB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakclb
        '\u{1F0DB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakhrt
        '\u{1F0BB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakdmd
        '\u{1F0CB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////qwnspd
        '\u{1F0AD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => { 
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnclb
        '\u{1F0DD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {   
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnhrt
        '\u{1F0BD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwndmd
        '\u{1F0CD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////kngspd
        '\u{1F0AE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngclb
        '\u{1F0DE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////knghrt
        '\u{1F0BE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngdmd
        '\u{1F0CE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {  
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    fve_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ALL ACES FAIL, CANNOT APPEND TO ON FIELD
        '\u{1F0C1}' | '\u{1F0A1}' | '\u{1F0B1}' | '\u{1F0D1}' => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
        /////CAN PROBABLY REMOVE THIS ERROR HANDLE, ALL CARDS WILL 
        /////MATCH
            _ => (),
            };
        };
    },

    "6" | "A6" | "B6" | "C6" | "D6" | "E6" | "F6" | "G6" | "H6" | "I6" | "J6" | "K6" | "L6" | "M6" | "N6" | "O6" | "P6" | "Q6" | "R6" | "S6" | "A 6" | "B 6" | "C 6" | "D 6" | "E 6" | "F 6" | "G 6" | "H 6" | "I 6" | "J 6" | "K 6" | "L 6" | "M 6" | "N 6" | "O 6" | "P 6" | "Q 6" | "R 6" | "S 6" | "6A" | "6B" | "6C" | "6D" | "6E" | "6F" | "6G" | "6H" | "6I" | "6J" | "6K" | "6L" | "6M" | "6N" | "6O" | "6P" | "6Q" | "6R" | "6S" | "6 A" | "6 B" | "6 C" | "6 D" | "6 E" | "6 F" | "6 G" | "6 H" | "6 I" | "6 J" | "6 K" | "6 L" | "6 M" | "6 N" | "6 O" | "6 P" | "6 Q" | "6 R" | "6 S"  => {
    
    let hcrd = holding.remove(0);
            let hccrd = hcrd.clone();
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "6" {
            ////change
             six_up.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                ////change
        }   else if six_up.len() == 0 {
    match hccrd {
        '\u{1F0CE}' | '\u{1F0AE}' | '\u{1F0DE}' | '\u{1F0BE}' => {
                ////change
                six_up.append(& mut holding);
                holding.clear();
                holding.push(joker);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                },
                    _ => {  
                let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                    match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

                    _ => (),
                        };
                    },
               };
          }     
            ////change
       else if six_up.len() != 0 {
                        ////change
            let veccrd = six_up.pop().unwrap();
            let vvecrd = veccrd.clone();
            ////change
            six_up.push(veccrd);
                match vvecrd {
                //////ALL ACES FAIL
                /////twospd
            '\u{1F0A2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twoclb
        '\u{1F0D2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twohrt
        '\u{1F0B2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twodmd
        '\u{1F0C2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrspd
        '\u{1F0A3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrclb
        '\u{1F0D3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                   ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrhrt
        '\u{1F0B3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrdmd
        '\u{1F0C3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
         /////forspd
        '\u{1F0A4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forclb
        '\u{1F0D4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forhrt
        '\u{1F0B4}' => { 
                    match hc3rd { 
                    ////thrspd
                    '\u{1F0A3}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrclb
                    '\u{1F0D3}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fordmd
        '\u{1F0C4}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A3}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D3}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////fvespd
        '\u{1F0A5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fveclb
        '\u{1F0D5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvehrt
        '\u{1F0B5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvedmd
        '\u{1F0C5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////sixspd
        '\u{1F0A6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixclb
        '\u{1F0D6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixhrt
        '\u{1F0B6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixdmd
        '\u{1F0C6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////svnspd
        '\u{1F0A7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnclb
        '\u{1F0D7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnhrt
        '\u{1F0B7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svndmd
        '\u{1F0C7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////atespd
        '\u{1F0A8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ateclb
        '\u{1F0D8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atehrt
        '\u{1F0B8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atedmd
        '\u{1F0C8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////ninspd
        '\u{1F0A9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninclb
        '\u{1F0D9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninhrt
        '\u{1F0B9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////nindmd
        '\u{1F0C9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////tenspd
        '\u{1F0AA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenclb
        '\u{1F0DA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenhrt
        '\u{1F0BA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tendmd
        '\u{1F0CA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////jakspd
        '\u{1F0AB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakclb
        '\u{1F0DB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakhrt
        '\u{1F0BB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakdmd
        '\u{1F0CB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////qwnspd
        '\u{1F0AD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => { 
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnclb
        '\u{1F0DD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {   
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnhrt
        '\u{1F0BD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwndmd
        '\u{1F0CD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////kngspd
        '\u{1F0AE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngclb
        '\u{1F0DE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////knghrt
        '\u{1F0BE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngdmd
        '\u{1F0CE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {  
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    six_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ALL ACES FAIL, CANNOT APPEND TO ON FIELD
        '\u{1F0C1}' | '\u{1F0A1}' | '\u{1F0B1}' | '\u{1F0D1}' => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
        /////CAN PROBABLY REMOVE THIS ERROR HANDLE, ALL CARDS WILL 
        /////MATCH
            _ => (),
            };
        };
    },
    
    "7" | "A7" | "B7" | "C7" | "D7" | "E7" | "F7" | "G7" | "H7" | "I7" | "J7" | "K7" | "L7" | "M7" | "N7" | "O7" | "P7" | "Q7" | "R7" | "S7" | "A 7" | "B 7" | "C 7" | "D 7" | "E 7" | "F 7" | "G 7" | "H 7" | "I 7" | "J 7" | "K 7" | "L 7" | "M 7" | "N 7" | "O 7" | "P 7" | "Q 7" | "R 7" | "S 7" | "7A" | "7B" | "7C" | "7D" | "7E" | "7F" | "7G" | "7H" | "7I" | "7J" | "7K" | "7L" | "7M" | "7N" | "7O" | "7P" | "7Q" | "7R" | "7S" | "7 A" | "7 B" | "7 C" | "7 D" | "7 E" | "7 F" | "7 G" | "7 H" | "7 I" | "7 J" | "7 K" | "7 L" | "7 M" | "7 N" | "7 O" | "7 P" | "7 Q" | "7 R" | "7 S"  => {
    
    let hcrd = holding.remove(0);
            let hccrd = hcrd.clone();
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "7" {
            ////change
             svn_up.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                ////change
        }   else if svn_up.len() == 0 {
    match hccrd {
        '\u{1F0CE}' | '\u{1F0AE}' | '\u{1F0DE}' | '\u{1F0BE}' => {
                ////change
                svn_up.append(& mut holding);
                holding.clear();
                holding.push(joker);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                },
                    _ => {  
                let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                    match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

                    _ => (),
                        };
                    },
               };
          }     
            ////change
       else if svn_up.len() != 0 {
                        ////change
            let veccrd = svn_up.pop().unwrap();
            let vvecrd = veccrd.clone();
            ////change
            svn_up.push(veccrd);
                match vvecrd {
                //////ALL ACES FAIL
                /////twospd
            '\u{1F0A2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twoclb
        '\u{1F0D2}' => { 
                    match hc3rd { 
                    ////acehrt
                    '\u{1F0B1}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////acedmd
                    '\u{1F0C1}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twohrt
        '\u{1F0B2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////twodmd
        '\u{1F0C2}' => { 
                    match hc3rd { 
                    ////acespd
                    '\u{1F0A1}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////aceclb
                    '\u{1F0D1}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrspd
        '\u{1F0A3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrclb
        '\u{1F0D3}' => { 
                    match hc3rd { 
                    ////twohrt
                    '\u{1F0B2}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twodmd
                    '\u{1F0C2}' => {
                   ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrhrt
        '\u{1F0B3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////thrdmd
        '\u{1F0C3}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A2}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D2}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
         /////forspd
        '\u{1F0A4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forclb
        '\u{1F0D4}' => { 
                    match hc3rd { 
                    ////thrhrt
                    '\u{1F0B3}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrdmd
                    '\u{1F0C3}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////forhrt
        '\u{1F0B4}' => { 
                    match hc3rd { 
                    ////thrspd
                    '\u{1F0A3}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////thrclb
                    '\u{1F0D3}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fordmd
        '\u{1F0C4}' => { 
                    match hc3rd { 
                    ////twospd
                    '\u{1F0A3}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////twoclb
                    '\u{1F0D3}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////fvespd
        '\u{1F0A5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fveclb
        '\u{1F0D5}' => { 
                    match hc3rd { 
                    ////forhrt
                    '\u{1F0B4}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fordmd
                    '\u{1F0C4}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvehrt
        '\u{1F0B5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////fvedmd
        '\u{1F0C5}' => { 
                    match hc3rd { 
                    ////forspd
                    '\u{1F0A4}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////forclb
                    '\u{1F0D4}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////sixspd
        '\u{1F0A6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixclb
        '\u{1F0D6}' => { 
                    match hc3rd { 
                    ////fvehrt
                    '\u{1F0B5}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fvedmd
                    '\u{1F0C5}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixhrt
        '\u{1F0B6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////sixdmd
        '\u{1F0C6}' => { 
                    match hc3rd { 
                    ////fvespd
                    '\u{1F0A5}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////fveclb
                    '\u{1F0D5}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////svnspd
        '\u{1F0A7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnclb
        '\u{1F0D7}' => { 
                    match hc3rd { 
                    ////sixhrt
                    '\u{1F0B6}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixdmd
                    '\u{1F0C6}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svnhrt
        '\u{1F0B7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////svndmd
        '\u{1F0C7}' => { 
                    match hc3rd { 
                    ////sixspd
                    '\u{1F0A6}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////sixclb
                    '\u{1F0D6}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////atespd
        '\u{1F0A8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ateclb
        '\u{1F0D8}' => { 
                    match hc3rd { 
                    ////svnhrt
                    '\u{1F0B7}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svndmd
                    '\u{1F0C7}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atehrt
        '\u{1F0B8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////atedmd
        '\u{1F0C8}' => { 
                    match hc3rd { 
                    ////svnspd
                    '\u{1F0A7}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////svnclb
                    '\u{1F0D7}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////ninspd
        '\u{1F0A9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninclb
        '\u{1F0D9}' => { 
                    match hc3rd { 
                    ////atehrt
                    '\u{1F0B8}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////atedmd
                    '\u{1F0C8}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ninhrt
        '\u{1F0B9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////nindmd
        '\u{1F0C9}' => { 
                    match hc3rd { 
                    ////atespd
                    '\u{1F0A8}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ateclb
                    '\u{1F0D8}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////tenspd
        '\u{1F0AA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenclb
        '\u{1F0DA}' => { 
                    match hc3rd { 
                    ////ninhrt
                    '\u{1F0B9}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////nindmd
                    '\u{1F0C9}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tenhrt
        '\u{1F0BA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////tendmd
        '\u{1F0CA}' => { 
                    match hc3rd { 
                    ////ninspd
                    '\u{1F0A9}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////ninclb
                    '\u{1F0D9}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////jakspd
        '\u{1F0AB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakclb
        '\u{1F0DB}' => { 
                    match hc3rd { 
                    ////tenhrt
                    '\u{1F0BA}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tendmd
                    '\u{1F0CA}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakhrt
        '\u{1F0BB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////jakdmd
        '\u{1F0CB}' => { 
                    match hc3rd { 
                    ////tenspd
                    '\u{1F0AA}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////tenclb
                    '\u{1F0DA}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////qwnspd
        '\u{1F0AD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => { 
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnclb
        '\u{1F0DD}' => { 
                    match hc3rd { 
                    ////jakhrt
                    '\u{1F0BB}' => {   
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakdmd
                    '\u{1F0CB}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwnhrt
        '\u{1F0BD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////qwndmd
        '\u{1F0CD}' => { 
                    match hc3rd { 
                    ////jakspd
                    '\u{1F0AB}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////jakclb
                    '\u{1F0DB}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
        /////kngspd
        '\u{1F0AE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {    
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngclb
        '\u{1F0DE}' => { 
                    match hc3rd { 
                    ////qwnhrt
                    '\u{1F0BD}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwndmd
                    '\u{1F0CD}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////knghrt
        '\u{1F0BE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////kngdmd
        '\u{1F0CE}' => { 
                    match hc3rd { 
                    ////qwnspd
                    '\u{1F0AD}' => {  
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    ////qwnclb
                    '\u{1F0DD}' => {
                    ////change
                    svn_up.append(& mut holding);
                    holding.clear();
                    holding.push(joker);
                    mov.clear();
                    mov2.clear();
                    clmn_ref.clear();
                    },
                    _ => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
                };
            },
            /////ALL ACES FAIL, CANNOT APPEND TO ON FIELD
        '\u{1F0C1}' | '\u{1F0A1}' | '\u{1F0B1}' | '\u{1F0D1}' => {
                    let mes = "Invalid: try again           ";
                    message.insert_str(0, mes);
                    mov.clear();
                    mov2.clear();
                    let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                        '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                        '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                        '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                        '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                        '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                        '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                        '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                        'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                        'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                        'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                        'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                        'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                        _ => (),
                        };
                    },
        /////CAN PROBABLY REMOVE THIS ERROR HANDLE, ALL CARDS WILL 
        /////MATCH
            _ => (),
            };
        };
    },
    
    "U" => {    
         let hcrd = holding.remove(0);
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "U" {
            ////change
             homespd.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                } else {
                let home_pop = homespd.pop().unwrap();
                let homeclone = home_pop.clone();
                homespd.push(home_pop);
                match homeclone {
                /////blankace      acespd
                '\u{1F0DF}' => {    
                    if hc3rd == '\u{1F0A1}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                /////acespd        twospd
            '\u{1F0A1}' => {    
                    if hc3rd == '\u{1F0A2}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                  /////twospd        thrspd
            '\u{1F0A2}' => {    
                    if hc3rd == '\u{1F0A3}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
              /////thrspd        forspd
            '\u{1F0A3}' => {    
                    if hc3rd == '\u{1F0A4}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////forspd        fvespd
            '\u{1F0A4}' => {    
                    if hc3rd == '\u{1F0A5}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////fvespd        sixspd
            '\u{1F0A5}' => {    
                    if hc3rd == '\u{1F0A6}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////sixspd        svnspd
            '\u{1F0A6}' => {    
                    if hc3rd == '\u{1F0A7}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////svnspd        atespd
            '\u{1F0A7}' => {    
                    if hc3rd == '\u{1F0A8}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////atespd        ninspd
            '\u{1F0A8}' => {    
                    if hc3rd == '\u{1F0A9}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////ninspd        tenspd
            '\u{1F0A9}' => {    
                    if hc3rd == '\u{1F0AA}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////tenspd        jakspd
            '\u{1F0AA}' => {    
                    if hc3rd == '\u{1F0AB}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////jakspd        qwnspd
            '\u{1F0AB}' => {    
                    if hc3rd == '\u{1F0AD}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////qwnspd        kngspd
            '\u{1F0AD}' => {    
                    if hc3rd == '\u{1F0AE}' {
                        homespd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////kngspd       
            '\u{1F0AE}' =>  {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                    };
                },
                _ => (),
                };
            };
    },
    
    "X" => {    
         let hcrd = holding.remove(0);
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "X" {
            ////change
             homehrt.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                } else {
                            /////change
                let home_pop = homehrt.pop().unwrap();
                let homeclone = home_pop.clone();
                homehrt.push(home_pop);
                match homeclone {
                /////blankace      acehrt
                '\u{1F0DF}' => {    
                    if hc3rd == '\u{1F0B1}' {
                    /////change
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                /////acespd        twospd
            '\u{1F0B1}' => {    
                    if hc3rd == '\u{1F0B2}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                  /////twospd        thrspd
            '\u{1F0B2}' => {    
                    if hc3rd == '\u{1F0B3}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
              /////thrspd        forspd
            '\u{1F0B3}' => {    
                    if hc3rd == '\u{1F0B4}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////forspd        fvespd
            '\u{1F0B4}' => {    
                    if hc3rd == '\u{1F0B5}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////fvespd        sixspd
            '\u{1F0B5}' => {    
                    if hc3rd == '\u{1F0B6}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////sixspd        svnspd
            '\u{1F0B6}' => {    
                    if hc3rd == '\u{1F0B7}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////svnspd        atespd
            '\u{1F0B7}' => {    
                    if hc3rd == '\u{1F0B8}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////atespd        ninspd
            '\u{1F0B8}' => {    
                    if hc3rd == '\u{1F0B9}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////ninspd        tenspd
            '\u{1F0B9}' => {    
                    if hc3rd == '\u{1F0BA}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////tenspd        jakspd
            '\u{1F0BA}' => {    
                    if hc3rd == '\u{1F0BB}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////jakspd        qwnspd
            '\u{1F0BB}' => {    
                    if hc3rd == '\u{1F0BD}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////qwnspd        kngspd
            '\u{1F0BD}' => {    
                    if hc3rd == '\u{1F0BE}' {
                        homehrt.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////kngspd       
            '\u{1F0BE}' =>  {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                    };
                },
                _ => (),
                };
            };
    },
    
    "W" => {    
         let hcrd = holding.remove(0);
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "W" {
            ////change
             homeclb.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                } else {
                            /////change
                let home_pop = homeclb.pop().unwrap();
                let homeclone = home_pop.clone();
                homeclb.push(home_pop);
                match homeclone {
                /////blankace      acehrt
                '\u{1F0DF}' => {    
                    if hc3rd == '\u{1F0D1}' {
                    /////change
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                /////acespd        twospd
            '\u{1F0D1}' => {    
                    if hc3rd == '\u{1F0D2}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                  /////twospd        thrspd
            '\u{1F0D2}' => {    
                    if hc3rd == '\u{1F0D3}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
              /////thrspd        forspd
            '\u{1F0D3}' => {    
                    if hc3rd == '\u{1F0D4}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////forspd        fvespd
            '\u{1F0D4}' => {    
                    if hc3rd == '\u{1F0D5}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////fvespd        sixspd
            '\u{1F0D5}' => {    
                    if hc3rd == '\u{1F0D6}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////sixspd        svnspd
            '\u{1F0D6}' => {    
                    if hc3rd == '\u{1F0D7}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////svnspd        atespd
            '\u{1F0D7}' => {    
                    if hc3rd == '\u{1F0D8}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////atespd        ninspd
            '\u{1F0D8}' => {    
                    if hc3rd == '\u{1F0D9}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////ninspd        tenspd
            '\u{1F0D9}' => {    
                    if hc3rd == '\u{1F0DA}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////tenspd        jakspd
            '\u{1F0DA}' => {    
                    if hc3rd == '\u{1F0DB}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////jakspd        qwnspd
            '\u{1F0DB}' => {    
                    if hc3rd == '\u{1F0DD}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////qwnspd        kngspd
            '\u{1F0DD}' => {    
                    if hc3rd == '\u{1F0DE}' {
                        homeclb.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////kngspd       
            '\u{1F0DE}' =>  {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                    };
                },
                _ => (),
                };
            };
    },
    
    "V" => {    
         let hcrd = holding.remove(0);
            let hc3rd = hcrd.clone();
            holding.insert(0, hcrd);
                ////change
        if clmn_ref == "V" {
            ////change
             homedmd.append(& mut holding);
                holding.clear();
               let mes = "Ok: Returned                 ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                clmn_ref.clear();
                } else {
                            /////change
                let home_pop = homedmd.pop().unwrap();
                let homeclone = home_pop.clone();
                homedmd.push(home_pop);
                match homeclone {
                /////blankace      acehrt
                '\u{1F0DF}' => {    
                    if hc3rd == '\u{1F0C1}' {
                    /////change
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                /////acespd        twospd
            '\u{1F0C1}' => {    
                    if hc3rd == '\u{1F0C2}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
                  /////twospd        thrspd
            '\u{1F0C2}' => {    
                    if hc3rd == '\u{1F0C3}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
              /////thrspd        forspd
            '\u{1F0C3}' => {    
                    if hc3rd == '\u{1F0C4}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////forspd        fvespd
            '\u{1F0C4}' => {    
                    if hc3rd == '\u{1F0C5}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////fvespd        sixspd
            '\u{1F0C5}' => {    
                    if hc3rd == '\u{1F0C6}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////sixspd        svnspd
            '\u{1F0C6}' => {    
                    if hc3rd == '\u{1F0C7}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////svnspd        atespd
            '\u{1F0C7}' => {    
                    if hc3rd == '\u{1F0C8}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////atespd        ninspd
            '\u{1F0C8}' => {    
                    if hc3rd == '\u{1F0C9}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////ninspd        tenspd
            '\u{1F0C9}' => {    
                    if hc3rd == '\u{1F0CA}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
             /////tenspd        jakspd
            '\u{1F0CA}' => {    
                    if hc3rd == '\u{1F0CB}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////jakspd        qwnspd
            '\u{1F0CB}' => {    
                    if hc3rd == '\u{1F0CD}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////qwnspd        kngspd
            '\u{1F0CD}' => {    
                    if hc3rd == '\u{1F0CE}' {
                        homedmd.append(& mut holding);
                        holding.clear();
                        holding.push(joker);
                        mov.clear();
                        mov2.clear();
                        clmn_ref.clear();
                            } else {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                        };
                    }
                },
            /////kngspd       
            '\u{1F0CE}' =>  {
                            let mes = "Invalid: try again           ";
                            message.insert_str(0, mes);
                            mov.clear();
                            mov2.clear();
                            let clmn_pop = clmn_ref.pop().unwrap();
                        match clmn_pop {
                    '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
                    '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
                    '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
                    '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
                    '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
                    '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
                    '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
                    'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
                    'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
                    'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
                    'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
                    'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },
                    _ => (),
                    };
                },
                _ => (),
                };
            };
    },
    
      _ => {  
            let mes = "Invalid: try again           ";
                message.insert_str(0, mes);
                mov.clear();
                mov2.clear();
                let clmn_pop = clmn_ref.pop().unwrap();
                match clmn_pop {
            '1' => {    one_up.append(& mut holding); 
                            holding.clear();
                            },
            '2' => {    two_up.append(& mut holding);
                            holding.clear();
                           },
            '3' => {    thr_up.append(& mut holding); 
                            holding.clear();
                            },
            '4' => {    for_up.append(& mut holding);
                            holding.clear();
                            },
            '5' => {    fve_up.append(& mut holding);
                            holding.clear();
                            },
            '6' => {    six_up.append(& mut holding); 
                            holding.clear();
                            },
            '7' => {    svn_up.append(& mut holding); 
                            holding.clear();
                            },
            'Y' => {    discard.append(& mut holding);
                            holding.clear();
                            },
            'U' => {    homespd.append(& mut holding);
                            holding.clear();
                            },
            'V' => {    homedmd.append(& mut holding); 
                            holding.clear();
                            },
            'W' => {    homeclb.append(& mut holding);
                            holding.clear();
                            },
            'X' => {    homehrt.append(& mut holding);
                            holding.clear();
                            },

            _ => (),
                    };
            },
    };
};

    continue;
    
    };

} 
   
   
   
   
   
   
  
